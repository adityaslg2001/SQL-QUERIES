select * from sales;
select * from products;


-- Filter the Sales table to show only sales with a total_price greater than $100.
select * from sales where total_price>100;

-- Retrieve the sale_id and total_price from the Sales table for sales made on January 3, 2024. 
select sale_id, total_price from sales where sale_date='2024-01-03';

-- Calculate the total revenue generated from all sales in the Sales table.
select sum(total_price) as total_revenue_generated from sales;

-- Calculate the average unit_price of products in the Products table.
select avg(unit_price) from products;

-- Count Sales Per Day from the Sales table.
select sale_date,count(quantity_sold) from sales group by sale_date;

-- Retrieve product_name and unit_price from the Products table with the Highest Unit Price
select product_name,unit_price from products order by unit_price desc limit 1;

-- Retrieve the sale_id, product_id, and total_price from the Sales table for sales with a quantity_sold greater than 4.
select sale_id, product_id, total_price from sales where quantity_sold>4;

-- Retrieve the total_price of all sales, rounding the values to two decimal places.
select round(sum(total_price),2) from sales;

-- Retrieve the sale_id and sale_date from the Sales table, formatting the sale_date as 'YYYY-MM-DD'.
select sale_id, date_format(sale_date, '%Y-%m-%d') as formatted_date from sales;

-- Calculate the total revenue generated from sales of products in the 'Electronics' category.  
select products.category,sum(total_price) as total_sales from sales
join products on products.product_id=sales.product_id
group by products.category;

--  Retrieve the product_name and unit_price from the Products table, filtering the unit_price to show only values between $20 and $600.
select product_name, unit_price from products where unit_price between 20 and 600;

-- Calculate the total quantity_sold of products in the 'Electronics' category.
select products.category, sum(sales.quantity_sold) from sales
join products on products.product_id=sales.product_id
where products.category='Electronics'
group by products.category;

-- Retrieve the product_name and total_price from the Sales table, calculating the total_price as quantity_sold multiplied by unit_price.
SELECT product_name, quantity_sold * unit_price AS total_price 
FROM Sales 
JOIN Products ON Sales.product_id = Products.product_id;

-- Identify the Most Frequently Sold Product from Sales table
SELECT product_id, COUNT(*) AS sales_count FROM Sales GROUP BY product_id ORDER BY sales_count DESC LIMIT 1;

-- Find the Products Not Sold from Products table
SELECT p.product_id, p.product_name, 
    CASE 
        WHEN SUM(s.quantity_sold) IS NULL THEN 'NOT SOLD' 
        ELSE 'SOLD' 
    END AS sold_status
FROM products p
LEFT JOIN sales s ON p.product_id = s.product_id
GROUP BY p.product_id, p.product_name;


-- Calculate the total revenue generated from sales for each product category.
SELECT p.category, SUM(s.total_price) AS total_revenue
FROM Sales s
JOIN Products p ON s.product_id = p.product_id
GROUP BY p.category;


-- Find the product category with the highest average unit price.
select category, avg(unit_price) as avg_price 
from products 
group by category
order by avg(unit_price);

-- Identify products with total sales exceeding 300. 
select product_name from products
where product_id in (select product_id from sales where total_price > 300);


-- Count the number of sales made in each month.
select monthname(sale_date) as month_name, count(product_id) as sale_count from sales
group by monthname(sale_date);


-- Retrieve Details for Products with 'Smart' in Their Name.  
select * from products where product_name like '%Smart%';


-- Determine the average quantity sold for products with a unit price greater than $100.
select avg(s.quantity_sold) as avg_unit_price 
from sales s
join products p on s.product_id = p.product_id
where p.unit_price > 100;


-- List all sales along with the corresponding product names.
SELECT s.sale_id, p.product_name
FROM Sales s
JOIN Products p ON s.product_id = p.product_id;

-- product, category and revenue percentage for each product.
SELECT p.category, 
       SUM(s.total_price) AS category_revenue,
       (SUM(s.total_price) / (SELECT SUM(total_price) FROM Sales)) * 100 AS revenue_percentage
FROM Sales s
JOIN Products p ON s.product_id = p.product_id
GROUP BY p.category
ORDER BY revenue_percentage DESC;

-- Calculate the running total revenue for each product category.
SELECT p.category, p.product_name, s.sale_date, 
       SUM(s.total_price) OVER (PARTITION BY p.category ORDER BY s.sale_date) AS running_total_revenue
FROM Sales s
JOIN Products p ON s.product_id = p.product_id;

-- Categorize sales as "High", "Medium", or "Low" based on total price (e.g., > $200 is High, $100-$200 is Medium, < $100 is Low).
SELECT sale_id, 
       CASE 
           WHEN total_price > 200 THEN 'High'
           WHEN total_price BETWEEN 100 AND 200 THEN 'Medium'
           ELSE 'Low'
       END AS sales_category
FROM Sales;

-- Identify sales where the quantity sold is greater than the average quantity sold.
SELECT *
FROM Sales
WHERE quantity_sold > (SELECT AVG(quantity_sold) FROM Sales);

-- Extract the month and year from the sale date and count the number of sales for each month.
SELECT CONCAT(YEAR(sale_date), '-', LPAD(MONTH(sale_date), 2, '0')) AS month,
       COUNT(*) AS sales_count
FROM Sales
GROUP BY YEAR(sale_date), MONTH(sale_date);

-- Calculate the number of days between the current date and the sale date for each sale.
SELECT sale_id, DATEDIFF(NOW(), sale_date) AS days_since_sale
FROM Sales;

-- Identify sales made during weekdays versus weekends.
SELECT sale_id,
       CASE 
           WHEN DAYOFWEEK(sale_date) IN (1, 7) THEN 'Weekend'
           ELSE 'Weekday'
       END AS day_type
FROM Sales;
